#!/bin/bash

AMN_SERVER_FQDN="nas.alvaone.net"
AMN_DATE_OPTS="%a %b %d %H:%M %Y"
AMN_CHECK=0
AMN_UNMOUNT=0

trap 'trap_abort' INT QUIT TERM HUP
trap 'trap_exit' EXIT

cleanup() {
    exit $1 || true
}

abort() {
    loge 'Aborting...'
    cleanup 0
}

trap_abort() {
    trap - EXIT INT QUIT TERM HUP
    abort
}

trap_exit() {
    log "Received exit..."
    trap - EXIT INT QUIT TERM HUP
    cleanup
}

log() {
    echo -e $(date +"$AMN_DATE_OPTS")": $1"
}

loge() {
    echo -e $(date +"$AMN_DATE_OPTS")": ERROR: $1" >&2
}

logc() {
    echo -e $(date +"$AMN_DATE_OPTS")": Exec: $1"
}

run_cmd() {
    # $1: command to run
    # $2: Redirection
    cmd=$1
    logc $cmd
    $cmd $2
}

usage() {
    echo "${0} - Auto Mount or Unmount NFS shares via systemd units"
    echo
    echo "Usage: ${0} [options] (mount|unmount)"
    echo
    echo "Options:"
    echo
    echo "    -h:    Show help information."
    echo
    echo "Commands:"
    echo
    echo "    mount     Create and start systemd mount units from commented fstab entries"
    echo "    unmount   Stop systemd mount units for commented fstab entries"
}

if [[ $# -lt 1 ]]; then
    usage
    exit 0
fi

log "AutoMountNFS started: $0::$$"

ARGS=("$@")
for ((a = 0; a < $#; a++)); do
    if [[ ${ARGS[$a]} == "check" ]]; then
        log "Found check command argument"
        AMN_CHECK=1
    elif [[ ${ARGS[$a]} == "unmount" ]]; then
        log "Found unmount command argument"
        AMN_UNMOUNT=1
    elif [[ ${ARGS[$a]} == "-h" ]]; then
        usage
        exit 0
    fi
done

# Parse commented NFS entries for the configured server
COMMENTED_NFS_ENTRIES=$(grep "^#.*${AMN_SERVER_FQDN}:.*nfs" /etc/fstab | sed 's/^#[[:space:]]*//')

create_systemd_mount_unit() {
    # $1: fstab entry line
    local fstab_entry="$1"
    local source=$(echo "$fstab_entry" | awk '{print $1}')
    local target=$(echo "$fstab_entry" | awk '{print $2}')
    local fstype=$(echo "$fstab_entry" | awk '{print $3}')
    local options=$(echo "$fstab_entry" | awk '{print $4}')

    # Skip if target is empty or invalid
    if [[ -z "$target" || "$target" =~ ^[[:space:]]*$ ]]; then
        return
    fi

    # Convert mount path to systemd unit name
    local unit_name=$(systemd-escape -p --suffix=mount "$target")
    local unit_path="/etc/systemd/system/${unit_name}"

    log "Creating systemd mount unit: $unit_name"

    cat > "$unit_path" << EOF
[Unit]
Description=NFS mount for $target
After=network-online.target
Wants=network-online.target

[Mount]
What=$source
Where=$target
Type=$fstype
Options=$options
EOF

    systemctl daemon-reload
    echo "$unit_name"
}

create_systemd_units() {
    if [ -z "$COMMENTED_NFS_ENTRIES" ]; then
        log "No commented NFS entries found for server $AMN_SERVER_FQDN"
        return
    fi

    log "Creating systemd units for commented NFS entries"
    while IFS= read -r entry; do
        if [ -n "$entry" ]; then
            create_systemd_mount_unit "$entry"
        fi
    done <<< "$COMMENTED_NFS_ENTRIES"
}

unmount_all() {
    # Stop systemd mount units for commented entries
    if [ -n "$COMMENTED_NFS_ENTRIES" ]; then
        log "Stopping systemd mount units for commented NFS entries"
        while IFS= read -r entry; do
            if [ -n "$entry" ]; then
                local target=$(echo "$entry" | awk '{print $2}')
                # Skip if target is empty or invalid
                if [[ -z "$target" || "$target" =~ ^[[:space:]]*$ ]]; then
                    continue
                fi
                local unit_name=$(systemd-escape -p --suffix=mount "$target")
                log "Stopping systemd mount unit: $unit_name"
                systemctl stop "$unit_name"
            fi
        done <<< "$COMMENTED_NFS_ENTRIES"
    else
        log "No commented NFS entries found for server $AMN_SERVER_FQDN"
    fi
}

mount_all() {
    # Create and start systemd mount units for commented entries
    if [ -n "$COMMENTED_NFS_ENTRIES" ]; then
        create_systemd_units
        log "Starting systemd mount units for commented NFS entries"
        while IFS= read -r entry; do
            if [ -n "$entry" ]; then
                local source=$(echo "$entry" | awk '{print $1}')
                local target=$(echo "$entry" | awk '{print $2}')

                # Skip if target is empty or invalid
                if [[ -z "$target" || "$target" =~ ^[[:space:]]*$ ]]; then
                    continue
                fi

                local unit_name=$(systemd-escape -p --suffix=mount "$target")

                # Check if the NFS share is available from server
                if [[ $NFS_SHARES != *$(echo $source | cut -d: -f2)* ]]; then
                    log "$target not provided by server!"
                    continue
                fi

                # Ensure mount point exists with correct ownership and permissions
                if [ ! -d "$target" ]; then
                    log "Creating mount point: $target"
                    mkdir -p "$target"
                fi

                # Set ownership to bigdata group and permissions (g+ws)
                log "Setting ownership and permissions for $target"
                chgrp bigdata "$target"
                chmod g+ws "$target"

                # Check if already mounted
                cmd="mountpoint -q $target"
                logc "$cmd"
                $cmd
                if [ $? -ne 0 ]; then
                    log "Starting systemd mount unit: $unit_name"
                    systemctl start "$unit_name"
                    if [ $? -ne 0 ]; then
                        loge "Starting systemd mount unit failed! ($?)"
                        continue
                    fi
                    log "started systemd mount unit $unit_name"
                fi
            fi
        done <<< "$COMMENTED_NFS_ENTRIES"
    else
        log "No commented NFS entries found for server $AMN_SERVER_FQDN"
    fi
}

if [[ "${AMN_CHECK}" -eq 1 ]]; then
    ping -c 1 "${AMN_SERVER_FQDN}"
    if [ $? -ne 0 ]; then
        log "The server could not be reached."
        unmount_all
    else
        log "Asking the server for mountpoints"
        cmd="showmount -e $AMN_SERVER_FQDN"
        logc "$cmd"
        NFS_SHARES=$(
            $cmd 2>&1 | sed -e '/^\//!d' | cut -f1 -d" "
            test ${PIPESTATUS[0]} -eq 0
        )
        smount_ret=$?
        if [ $smount_ret -ne 0 ]; then
            loge "No shares available from host! ($smount_ret)"
            exit
        fi
        log "Server mount points:\n$NFS_SHARES"
        mount_all
    fi
fi

if [[ "${AMN_UNMOUNT}" -eq 1 ]]; then
    unmount_all
fi

# vim: ft=sh
